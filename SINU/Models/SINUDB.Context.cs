//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SINU.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SINUEntities : DbContext
    {
        public SINUEntities()
            : base("name=SINUEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActividadMilitar> ActividadMilitar { get; set; }
        public virtual DbSet<Baja> Baja { get; set; }
        public virtual DbSet<Configuracion> Configuracion { get; set; }
        public virtual DbSet<DocPresentado> DocPresentado { get; set; }
        public virtual DbSet<Domicilio> Domicilio { get; set; }
        public virtual DbSet<EstablecimientoRindeExamen> EstablecimientoRindeExamen { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<EstadoOcupacional> EstadoOcupacional { get; set; }
        public virtual DbSet<Estudio> Estudio { get; set; }
        public virtual DbSet<Etapa> Etapa { get; set; }
        public virtual DbSet<Familiares> Familiares { get; set; }
        public virtual DbSet<Fuerza> Fuerza { get; set; }
        public virtual DbSet<Inscripcion> Inscripcion { get; set; }
        public virtual DbSet<Institucion> Institucion { get; set; }
        public virtual DbSet<Institutos> Institutos { get; set; }
        public virtual DbSet<NiveldEstudio> NiveldEstudio { get; set; }
        public virtual DbSet<NivelIdioma> NivelIdioma { get; set; }
        public virtual DbSet<OficinasYDelegaciones> OficinasYDelegaciones { get; set; }
        public virtual DbSet<PeriodosInscripciones> PeriodosInscripciones { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<PersonaIdioma> PersonaIdioma { get; set; }
        public virtual DbSet<Postulante> Postulante { get; set; }
        public virtual DbSet<PostulanteViaje> PostulanteViaje { get; set; }
        public virtual DbSet<Preferencia> Preferencia { get; set; }
        public virtual DbSet<Secuencia_EtapaEstado> Secuencia_EtapaEstado { get; set; }
        public virtual DbSet<Sexo> Sexo { get; set; }
        public virtual DbSet<SituacionOcupacional> SituacionOcupacional { get; set; }
        public virtual DbSet<SituacionRevista> SituacionRevista { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoDocPresentado> TipoDocPresentado { get; set; }
        public virtual DbSet<TipoNacionalidad> TipoNacionalidad { get; set; }
        public virtual DbSet<InscripcionEtapaEstado> InscripcionEtapaEstado { get; set; }
        public virtual DbSet<vEstCivil> vEstCivil { get; set; }
        public virtual DbSet<vLOCALIDAD> vLOCALIDAD { get; set; }
        public virtual DbSet<vParentesco> vParentesco { get; set; }
        public virtual DbSet<vPeriodosInscrip> vPeriodosInscrip { get; set; }
        public virtual DbSet<vProvincia_Depto_Localidad> vProvincia_Depto_Localidad { get; set; }
        public virtual DbSet<vRELIGION> vRELIGION { get; set; }
        public virtual DbSet<vSecuencia_EtapaEstado> vSecuencia_EtapaEstado { get; set; }
        public virtual DbSet<vSeguridad_Grupos> vSeguridad_Grupos { get; set; }
        public virtual DbSet<vSeguridad_Grupos_Usuarios> vSeguridad_Grupos_Usuarios { get; set; }
        public virtual DbSet<vSeguridad_Usuarios> vSeguridad_Usuarios { get; set; }
        public virtual DbSet<vPersona_DatosBasicos> vPersona_DatosBasicos { get; set; }
        public virtual DbSet<vEntrevistaLugarFecha> vEntrevistaLugarFecha { get; set; }
        public virtual DbSet<vInscripcionEtapaEstadoUltimoEstado> vInscripcionEtapaEstadoUltimoEstado { get; set; }
        public virtual DbSet<ConfiguracionAdmin> ConfiguracionAdmin { get; set; }
        public virtual DbSet<vConfiguracionAdmin> vConfiguracionAdmin { get; set; }
        public virtual DbSet<vPersona_DatosPer> vPersona_DatosPer { get; set; }
        public virtual DbSet<vPersona_Domicilio> vPersona_Domicilio { get; set; }
        public virtual DbSet<VPersona_Estudio> VPersona_Estudio { get; set; }
        public virtual DbSet<vPersona_ActividadMilitar> vPersona_ActividadMilitar { get; set; }
        public virtual DbSet<vPersona_SituacionOcupacional> vPersona_SituacionOcupacional { get; set; }
        public virtual DbSet<vPersona_Idioma> vPersona_Idioma { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spIngresaASeguridad(string uSUARIO, string grupo, string mr, string grado, string destino, string nombre, string apellido)
        {
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            var grupoParameter = grupo != null ?
                new ObjectParameter("Grupo", grupo) :
                new ObjectParameter("Grupo", typeof(string));
    
            var mrParameter = mr != null ?
                new ObjectParameter("mr", mr) :
                new ObjectParameter("mr", typeof(string));
    
            var gradoParameter = grado != null ?
                new ObjectParameter("Grado", grado) :
                new ObjectParameter("Grado", typeof(string));
    
            var destinoParameter = destino != null ?
                new ObjectParameter("Destino", destino) :
                new ObjectParameter("Destino", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spIngresaASeguridad", uSUARIOParameter, grupoParameter, mrParameter, gradoParameter, destinoParameter, nombreParameter, apellidoParameter);
        }
    
        public virtual ObjectResult<spPrueba_Result> spPrueba(string uSUARIO, string funcion)
        {
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            var funcionParameter = funcion != null ?
                new ObjectParameter("Funcion", funcion) :
                new ObjectParameter("Funcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPrueba_Result>("spPrueba", uSUARIOParameter, funcionParameter);
        }
    
        public virtual ObjectResult<spValidarUsuario_Result> spValidarUsuario(string uSUARIO, string funcion)
        {
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            var funcionParameter = funcion != null ?
                new ObjectParameter("Funcion", funcion) :
                new ObjectParameter("Funcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidarUsuario_Result>("spValidarUsuario", uSUARIOParameter, funcionParameter);
        }
    
        public virtual int tablasnuevas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tablasnuevas");
        }
    
        public virtual int VaciarASPNETUser(string correoregistrado, Nullable<int> eliminar)
        {
            var correoregistradoParameter = correoregistrado != null ?
                new ObjectParameter("correoregistrado", correoregistrado) :
                new ObjectParameter("correoregistrado", typeof(string));
    
            var eliminarParameter = eliminar.HasValue ?
                new ObjectParameter("eliminar", eliminar) :
                new ObjectParameter("eliminar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VaciarASPNETUser", correoregistradoParameter, eliminarParameter);
        }
    
        public virtual int spCreaPostulante(string apellido, string nombre, string dNI, string email, Nullable<int> idPreferenciaInstituto, Nullable<int> idDelegacionOficinaIngresoInscribio)
        {
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var dNIParameter = dNI != null ?
                new ObjectParameter("DNI", dNI) :
                new ObjectParameter("DNI", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var idPreferenciaInstitutoParameter = idPreferenciaInstituto.HasValue ?
                new ObjectParameter("IdPreferenciaInstituto", idPreferenciaInstituto) :
                new ObjectParameter("IdPreferenciaInstituto", typeof(int));
    
            var idDelegacionOficinaIngresoInscribioParameter = idDelegacionOficinaIngresoInscribio.HasValue ?
                new ObjectParameter("IdDelegacionOficinaIngresoInscribio", idDelegacionOficinaIngresoInscribio) :
                new ObjectParameter("IdDelegacionOficinaIngresoInscribio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreaPostulante", apellidoParameter, nombreParameter, dNIParameter, emailParameter, idPreferenciaInstitutoParameter, idDelegacionOficinaIngresoInscribioParameter);
        }
    
        public virtual ObjectResult<string> Vaciar(string valoremail, Nullable<int> eliminandotabla)
        {
            var valoremailParameter = valoremail != null ?
                new ObjectParameter("valoremail", valoremail) :
                new ObjectParameter("valoremail", typeof(string));
    
            var eliminandotablaParameter = eliminandotabla.HasValue ?
                new ObjectParameter("eliminandotabla", eliminandotabla) :
                new ObjectParameter("eliminandotabla", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Vaciar", valoremailParameter, eliminandotablaParameter);
        }
    
        public virtual int spDatosBasicosUpdate(string apellido, string nombres, Nullable<int> idSexo, string dNI, string telefono, string celular, string email, Nullable<int> idDelegacionOficinaIngresoInscribio, string comoSeEntero, Nullable<int> idPreferencia, Nullable<int> idPersona, Nullable<int> idPostulante)
        {
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("IdSexo", idSexo) :
                new ObjectParameter("IdSexo", typeof(int));
    
            var dNIParameter = dNI != null ?
                new ObjectParameter("DNI", dNI) :
                new ObjectParameter("DNI", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var idDelegacionOficinaIngresoInscribioParameter = idDelegacionOficinaIngresoInscribio.HasValue ?
                new ObjectParameter("IdDelegacionOficinaIngresoInscribio", idDelegacionOficinaIngresoInscribio) :
                new ObjectParameter("IdDelegacionOficinaIngresoInscribio", typeof(int));
    
            var comoSeEnteroParameter = comoSeEntero != null ?
                new ObjectParameter("ComoSeEntero", comoSeEntero) :
                new ObjectParameter("ComoSeEntero", typeof(string));
    
            var idPreferenciaParameter = idPreferencia.HasValue ?
                new ObjectParameter("IdPreferencia", idPreferencia) :
                new ObjectParameter("IdPreferencia", typeof(int));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var idPostulanteParameter = idPostulante.HasValue ?
                new ObjectParameter("IdPostulante", idPostulante) :
                new ObjectParameter("IdPostulante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDatosBasicosUpdate", apellidoParameter, nombresParameter, idSexoParameter, dNIParameter, telefonoParameter, celularParameter, emailParameter, idDelegacionOficinaIngresoInscribioParameter, comoSeEnteroParameter, idPreferenciaParameter, idPersonaParameter, idPostulanteParameter);
        }
    
        public virtual int spDatosPersonalesUpdate(Nullable<int> idPersona, string cUIL, Nullable<System.DateTime> fechaNacimiento, string idEstadoCivil, string idReligion, Nullable<int> idTipoNacionalidad)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var cUILParameter = cUIL != null ?
                new ObjectParameter("CUIL", cUIL) :
                new ObjectParameter("CUIL", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var idEstadoCivilParameter = idEstadoCivil != null ?
                new ObjectParameter("IdEstadoCivil", idEstadoCivil) :
                new ObjectParameter("IdEstadoCivil", typeof(string));
    
            var idReligionParameter = idReligion != null ?
                new ObjectParameter("IdReligion", idReligion) :
                new ObjectParameter("IdReligion", typeof(string));
    
            var idTipoNacionalidadParameter = idTipoNacionalidad.HasValue ?
                new ObjectParameter("idTipoNacionalidad", idTipoNacionalidad) :
                new ObjectParameter("idTipoNacionalidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDatosPersonalesUpdate", idPersonaParameter, cUILParameter, fechaNacimientoParameter, idEstadoCivilParameter, idReligionParameter, idTipoNacionalidadParameter);
        }
    
        public virtual ObjectResult<sp_vPaises_Result> sp_vPaises(string cODIGO)
        {
            var cODIGOParameter = cODIGO != null ?
                new ObjectParameter("CODIGO", cODIGO) :
                new ObjectParameter("CODIGO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_vPaises_Result>("sp_vPaises", cODIGOParameter);
        }
    
        public virtual int spEstudiosIU(Nullable<int> idEstudio, Nullable<int> idPersona, string titulo, Nullable<bool> completo, Nullable<int> idNiveldEstudio, Nullable<int> idInstitutos, Nullable<double> promedio, Nullable<int> cantidadMateriaAdeudadas, Nullable<int> ultimoAnioCursado)
        {
            var idEstudioParameter = idEstudio.HasValue ?
                new ObjectParameter("IdEstudio", idEstudio) :
                new ObjectParameter("IdEstudio", typeof(int));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var completoParameter = completo.HasValue ?
                new ObjectParameter("Completo", completo) :
                new ObjectParameter("Completo", typeof(bool));
    
            var idNiveldEstudioParameter = idNiveldEstudio.HasValue ?
                new ObjectParameter("IdNiveldEstudio", idNiveldEstudio) :
                new ObjectParameter("IdNiveldEstudio", typeof(int));
    
            var idInstitutosParameter = idInstitutos.HasValue ?
                new ObjectParameter("IdInstitutos", idInstitutos) :
                new ObjectParameter("IdInstitutos", typeof(int));
    
            var promedioParameter = promedio.HasValue ?
                new ObjectParameter("Promedio", promedio) :
                new ObjectParameter("Promedio", typeof(double));
    
            var cantidadMateriaAdeudadasParameter = cantidadMateriaAdeudadas.HasValue ?
                new ObjectParameter("CantidadMateriaAdeudadas", cantidadMateriaAdeudadas) :
                new ObjectParameter("CantidadMateriaAdeudadas", typeof(int));
    
            var ultimoAnioCursadoParameter = ultimoAnioCursado.HasValue ?
                new ObjectParameter("ultimoAnioCursado", ultimoAnioCursado) :
                new ObjectParameter("ultimoAnioCursado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEstudiosIU", idEstudioParameter, idPersonaParameter, tituloParameter, completoParameter, idNiveldEstudioParameter, idInstitutosParameter, promedioParameter, cantidadMateriaAdeudadasParameter, ultimoAnioCursadoParameter);
        }
    
        public virtual int spDomiciliosU(Nullable<int> idDomicilioDNI, string calle, string numero, string piso, string unidad, Nullable<int> idLocalidad, string prov_Loc_CP, string idPais, Nullable<int> idDomicilioActual, string eventualCalle, string eventualNumero, string eventualPiso, string eventualUnidad, Nullable<int> eventualIdLocalidad, string eventualProv_Loc_CP, string eventualIdPais)
        {
            var idDomicilioDNIParameter = idDomicilioDNI.HasValue ?
                new ObjectParameter("IdDomicilioDNI", idDomicilioDNI) :
                new ObjectParameter("IdDomicilioDNI", typeof(int));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var pisoParameter = piso != null ?
                new ObjectParameter("Piso", piso) :
                new ObjectParameter("Piso", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var idLocalidadParameter = idLocalidad.HasValue ?
                new ObjectParameter("IdLocalidad", idLocalidad) :
                new ObjectParameter("IdLocalidad", typeof(int));
    
            var prov_Loc_CPParameter = prov_Loc_CP != null ?
                new ObjectParameter("Prov_Loc_CP", prov_Loc_CP) :
                new ObjectParameter("Prov_Loc_CP", typeof(string));
    
            var idPaisParameter = idPais != null ?
                new ObjectParameter("IdPais", idPais) :
                new ObjectParameter("IdPais", typeof(string));
    
            var idDomicilioActualParameter = idDomicilioActual.HasValue ?
                new ObjectParameter("IdDomicilioActual", idDomicilioActual) :
                new ObjectParameter("IdDomicilioActual", typeof(int));
    
            var eventualCalleParameter = eventualCalle != null ?
                new ObjectParameter("EventualCalle", eventualCalle) :
                new ObjectParameter("EventualCalle", typeof(string));
    
            var eventualNumeroParameter = eventualNumero != null ?
                new ObjectParameter("EventualNumero", eventualNumero) :
                new ObjectParameter("EventualNumero", typeof(string));
    
            var eventualPisoParameter = eventualPiso != null ?
                new ObjectParameter("EventualPiso", eventualPiso) :
                new ObjectParameter("EventualPiso", typeof(string));
    
            var eventualUnidadParameter = eventualUnidad != null ?
                new ObjectParameter("EventualUnidad", eventualUnidad) :
                new ObjectParameter("EventualUnidad", typeof(string));
    
            var eventualIdLocalidadParameter = eventualIdLocalidad.HasValue ?
                new ObjectParameter("EventualIdLocalidad", eventualIdLocalidad) :
                new ObjectParameter("EventualIdLocalidad", typeof(int));
    
            var eventualProv_Loc_CPParameter = eventualProv_Loc_CP != null ?
                new ObjectParameter("EventualProv_Loc_CP", eventualProv_Loc_CP) :
                new ObjectParameter("EventualProv_Loc_CP", typeof(string));
    
            var eventualIdPaisParameter = eventualIdPais != null ?
                new ObjectParameter("EventualIdPais", eventualIdPais) :
                new ObjectParameter("EventualIdPais", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDomiciliosU", idDomicilioDNIParameter, calleParameter, numeroParameter, pisoParameter, unidadParameter, idLocalidadParameter, prov_Loc_CPParameter, idPaisParameter, idDomicilioActualParameter, eventualCalleParameter, eventualNumeroParameter, eventualPisoParameter, eventualUnidadParameter, eventualIdLocalidadParameter, eventualProv_Loc_CPParameter, eventualIdPaisParameter);
        }
    
        public virtual int spEstudiosEliminar(Nullable<int> idEstudio)
        {
            var idEstudioParameter = idEstudio.HasValue ?
                new ObjectParameter("IdEstudio", idEstudio) :
                new ObjectParameter("IdEstudio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEstudiosEliminar", idEstudioParameter);
        }
    }
}
