@model SINU.ViewModels.DomicilioVM

@*@{
    ViewBag.Title = "Domicilio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}*@

@using (Ajax.BeginForm("Domicilio", "Postulante", null,
    new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "Exito(data,status,xhr)",
        OnFailure = "Falla",
//LoadingElementId = "carga",
//LoadingElementDuration = 1000,
//UpdateTargetId = "resultTarget"
},
    new { id = "MyNewNameId" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <h2>Domicilio Real DNI:</h2>
            <br />
            <div class="form-group row ">


                <div class="col-sm-6">


                    @Html.HiddenFor(model => model.vPersona_DomicilioVM.IdDomicilioDNI)
                    @Html.HiddenFor(model => model.vPersona_DomicilioVM.IdDomicilioActual)


                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Calle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Calle, new { htmlAttributes = new { @class = "form-control  " } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Calle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Numero, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Numero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Numero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Piso, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Piso, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control"@*@readonly = "readonly"*@}
})
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Piso, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Unidad, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Unidad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Unidad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">

                    <div class="form-group">
                        @Html.LabelFor(m => m.sp_vPaises_ResultVM, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">

                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.IdPais, new SelectList(Model.sp_vPaises_ResultVM, "CODIGO", "DESCRIPCION"), null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.IdPais)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.provincias, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.Provincia, new SelectList(Model.provincias, "", ""), "Seleccione una Provincia", htmlAttributes: new { @class = "form-control", @id = "ProviR" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Provincia)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.Localidad, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.IdLocalidad, new SelectList(Model.vProvincia_Depto_LocalidadsVM, "IdLocalidad", "Localidad"), "Seleccione una Localidad", htmlAttributes: new { @class = "form-control", @id = "LocaliR" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Localidad)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @* @Html.TextBoxFor(m => m.vPersona_DomicilioVM.CODIGO_POSTAL, new { @class = "form-control", @id = "CodigoPostal " })*@
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, new { @class = "form-control", @id = "CPReal" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <br />
            </div>
            <h2>Domicilio Eventual:</h2>
            <br />
            <div class="form-group row ">


                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualCalle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualCalle, new { htmlAttributes = new { @class = "form-control  " } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualCalle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualNumero, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualNumero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualNumero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualPiso, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualPiso, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualPiso, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualUnidad, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualUnidad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualUnidad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualPais, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualIdPais, new SelectList(Model.sp_vPaises_ResultVM, "CODIGO", "DESCRIPCION"), null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualPais)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualProvincia, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualProvincia, new SelectList(Model.provincias, "", ""), "Seleccione una Provincia", htmlAttributes: new { @class = "form-control", @id = "ProviE" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualProvincia)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualLocalidad, new { @class = "col-md-6 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualIdLocalidad, new SelectList(Model.vProvincia_Depto_LocalidadsVM, "IdLocalidad", "Localidad"), "Seleccione una Localidad", htmlAttributes: new { @class = "form-control", @id = "LocaliE" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualLocalidad)
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @* @Html.TextBoxFor(m => m.vPersona_DomicilioVM.CODIGO_POSTAL, new { @class = "form-control", @id = "CodigoPostal " })*@
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, new { @class = "form-control", @id = "CPEventual" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <br />
            </div>
            <div class="form-group pl-3">
                <input type="submit" value="Guadar Datos" class="btn btn-success " id="jejeje" />
            </div>


        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
 

    <script>

        $(document).ready(function () {

            //variable para guardar el ID dropboxlist que se utilizara de acuerdo con el dropboxlist de provincia seleccionado
            var localidad;
            //al selecciona una provincia tanto en el domicilio eventual como en el real llama a esta funcion
            $("#ProviR,#ProviE").change(function () {
                //alert($(this).attr("id"));
                //guardo id del la localidad real o guardo id del la localidad eventual
                localidad = ($(this).attr("id") == "ProviR") ? "#LocaliR" : "#LocaliE";
                //limio el dropboxlist antes de cargarlo
                $(localidad).empty();
                //llamo al JsonResult '/Postulante/EnCascada' y le envio la provincia selecciona
                $.getJSON('/Postulante/DropEnCascada', {
                    Provincia: $(this).val(),
                },
                    function (data) {
                        //agrego al dropboxlist la etiqueta option con cada localidad que le corresponde a la provincia seleccionada
                        $.each(data, function () {
                            $(localidad).append('<option value=' +
                                this.Value + '>' + this.Text + '</option>');
                        });

                    });

            });

            $("#LocaliR,#LocaliE").change(function () {
                //variable para el TexBOXFOR de CP
                var cpbox;
                //segun tipo de localidad seleccionada se guardara su texboxfor correspondiente
                cpbox = ($(this).attr("id") == "LocaliR") ? "#CPReal" : "#CPEventual";
                //alert(cpbox);
                $.getJSON('/Postulante/DropEnCascada', {
                    Localidad: $(this).val(),
                },
                    function (data) {
                        //alert(data.Text);
                        $(cpbox).val(data.Text);
                        //alert($("#postal").val());
                    });


            });



            //var availableTags = [
            //    "ActionScript",
            //    "AppleScript",
            //    "Asp",
            //    "BASIC",
            //    "C",
            //    "C++",
            //    "Clojure",
            //    "COBOL",
            //    "ColdFusion",
            //    "Erlang",
            //    "Fortran",
            //    "Groovy",
            //    "Haskell",
            //    "Java",
            //    "JavaScript",
            //    "Lisp",
            //    "Perl",
            //    "PHP",
            //    "Python",
            //    "Ruby",
            //    "Scala",
            //    "Scheme"
            //];
            //$("#tags").autocomplete({
            //    source: availableTags
            //});


        });

        function Exito(response, status, xhr) {
            alert("success: " + response.success + " " + response.msg);
            //$("#MSGexito").html("success: " + response.success + " " + response.msg);
            //$(".modal").modal("show");
        };

        function Falla(response) {
            alert("Error occured.");
        };




    </script>

}*@
